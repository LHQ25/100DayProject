#!/bin/bash

# 预设变量
# shell直接提供无需定义的变量

# $# : 传给shell脚本参数的数量
# $* : 传给shell脚本参数的内容
# $1,$2...$9 : 运行脚本时传递给其的参数，用逗号隔开
# $? : 命令执行后返回的状态, 用于检查上一个命令是否执行正确(在linux中，命令退出状态为0表示该命令执行正确,任何非0值表示命令执行错误)
# $0 : 当前执行的进程名
# $$ : 当前进程的进程号，最常见的用途是用作临时文件名以保证临时文件名不会重复

echo "参数的格式=$#"
echo "参数的内容=$*"
echo "第一个参数=$1"
echo "第二个参数=$2"
echo "第伞个参数=$3"
readonly data=10
data = 250
echo "data=250的执行结果:$?"
echo "进程名=$0"
echo "进程号=$$"

# 脚本标量的特殊用法 "" '' `` \ () {}
# "" : 双引号。包含的变量会被解释
# '' : 单引号。包含的变量会被当字符串解释
# `` : 反引号(数字键1 左边的)。反引号中的内容作为系统命令，并执行其内容，可以替换输出为一个变量 echo "today is `date`"  ->  today is 2021年 9月28日 星期二 17时11分38秒 CST
# \ : 转义字符。同C语言， \n\t\r\a等echo命令需要加 -e 转义
# () : 命令序列。由子shell来完成，不影响当前shell中的变量
# {} : 命令序列。在当前shell中执行，会影响当前变量
echo "today is `date`"
ls
echo "##\n##"
echo -e "##\n##"

data2=10
( # 子shell来完成，不影响当前shell中的变量
    data2=100
    echo "data=$data"
)
echo "data2=$data2"

{ # 当前shell来完成，不影响shell中的变量
    data2=100
    echo "data2=$data2"
}
echo "data2=$data2"