
// 语句与表达式
mod YuJuAndBiaoDaShi {

    fn statement_test(x: i32, y: i32) -> i32 {

        // Rust 的函数体是由一系列语句组成，最后由一个表达式来返回值
        let x = x+1;    // 语句
        let y = y+2;    // 语句
        x+y             // 表达式  可以做返回值不用写return
        // 语句会执行一些操作但是不会返回一个值，
        // 表达式会在求值后返回一个值，因此在上述函数体的三行代码中，前两行是语句，最后一行是表达式。
    }

    fn statement_test2() {

        let a = 8;
        let b: Vec<f64> = Vec::new();
        let (a, c) = ("hi", false); 
        // 以上都是语句，它们完成了一个具体的操作，但是并没有返回值，因此是语句
        // let 是语句，不是表达式，因此它不返回值，也就不能给其它变量赋值
    }

    fn expression_test() {
        // 表达式会进行求值，然后返回一个值。例如 5 + 6，在求值后，返回值 11，因此它就是一条表达式。
        // 表达式可以成为语句的一部分，例如 let y = 6 中，6 就是一个表达式，它在求值后返回一个值 6（有些反直觉，但是确实是表达式）。
        // 调用一个函数是表达式，因为会返回一个值，调用宏也是表达式，用花括号包裹最终返回一个值的语句块也是表达式，总之，能返回值，它就是表达式
        let y = {
            let x = 7;
            x + 1       // 最后一行是表达式，返回了 x + 1 的值，不能以分号结尾，否则就会变成语句， 表达式不能包含分号。
        };
        // 最后，表达式如果不返回任何值，会隐式地返回一个 ()
    }

}