#!/usr/bin/ruby -w
# -*- coding: UTF-8 -*-

# ------------------------------------------------------------
# Ruby 方法
# Ruby 方法与其他编程语言中的函数类似。Ruby 方法用于捆绑一个或多个重复的语句到一个单元中。
# 方法名应以小写字母开头。如果您以大写字母作为方法名的开头，Ruby 可能会把它当作常量，从而导致不正确地解析调用。
# 方法应在调用之前定义，否则 Ruby 会产生未定义的方法调用异常

def method_name 
    # expr..
end

# ------------------------------------------------------------
# 接受参数的方法 可以设置参数默认值
def test(a1="Ruby", a2="Perl")
    puts "编程语言为 #{a1}"
    puts "编程语言为 #{a2}"
 end

 # 调用方法
 test "C", "C++"
 test

# ------------------------------------------------------------
# 从方法返回值
# Ruby 中的每个方法默认都会返回一个值。这个返回的值是最后一个语句的值
def test
    i = 100
    j = 10
    k = 0
end
# 在调用这个方法时，将返回最后一个声明的变量 k

# ------------------------------------------------------------
# Ruby return 语句
#       return
#       或
#       return 12
#       或
#       return 1,2,3
def test2
    i = 100
    j = 200
    k = 300
return i, j, k
end
var = test2
puts var

# ------------------------------------------------------------
# 可变数量的参数
def sample (*test)
    puts "参数个数为 #{test.length}"
    for i in 0...test.length
       puts "参数值为 #{test[i]}"
    end
end
sample "Zara", "6", "F"
sample "Mac", "36", "M", "MCA"

# ------------------------------------------------------------
# 类方法
# 当方法定义在类的外部，方法默认标记为 private。另一方面，如果方法定义在类中的，则默认标记为 public。
# 方法默认的可见性和 private 标记可通过模块（Module）的 public 或 private 改变。
# 当你想要访问类的方法时，您首先需要实例化类。然后，使用对象，您可以访问类的任何成员。
# Ruby 提供了一种不用实例化即可访问方法的方式。让我们看看如何声明并访问类方法
class Accounts
    def reading_charge
    end
    def Accounts.return_date
    end
end
# 我们已经知道方法 return_date 是如何声明的。它是通过在类名后跟着一个点号，点号后跟着方法名来声明的。您可以直接访问类方法
Accounts.return_date

# ------------------------------------------------------------
# Ruby alias 语句
# 用于为方法或全局变量起别名。别名不能在方法主体内定义。即使方法被重写，方法的别名也保持方法的当前定义
# 为编号的全局变量（$1, $2,...）起别名是被禁止的。重写内置的全局变量可能会导致严重的问题
alias foo bar
alias $MATCH $&
# 为 bar 定义了别名为 foo，为 $& 定义了别名为 $MATCH。

# ------------------------------------------------------------
# Ruby undef 语句
# 用于取消方法定义。undef 不能出现在方法主体内
# 使用 undef 和 alias，类的接口可以从父类独立修改，但请注意，在自身内部方法调用时，它可能会破坏程序
undef bar